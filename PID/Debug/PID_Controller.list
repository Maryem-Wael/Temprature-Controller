
PID_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f5c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010f0  080010f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010f0  080010f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080010f0  080010f0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010f0  080010f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010f0  080010f0  000110f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010f4  080010f4  000110f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080010f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000007c  08001174  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200000bc  08001174  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f0d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008fb  00000000  00000000  00021fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  000228b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  00022ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b1e6  00000000  00000000  00022c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d47  00000000  00000000  0002de0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003ab24  00000000  00000000  0002fb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006a679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000066c  00000000  00000000  0006a6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000007c 	.word	0x2000007c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010d8 	.word	0x080010d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000080 	.word	0x20000080
 80001d0:	080010d8 	.word	0x080010d8

080001d4 <__aeabi_fmul>:
 80001d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001dc:	bf1e      	ittt	ne
 80001de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001e2:	ea92 0f0c 	teqne	r2, ip
 80001e6:	ea93 0f0c 	teqne	r3, ip
 80001ea:	d06f      	beq.n	80002cc <__aeabi_fmul+0xf8>
 80001ec:	441a      	add	r2, r3
 80001ee:	ea80 0c01 	eor.w	ip, r0, r1
 80001f2:	0240      	lsls	r0, r0, #9
 80001f4:	bf18      	it	ne
 80001f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001fa:	d01e      	beq.n	800023a <__aeabi_fmul+0x66>
 80001fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000200:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000204:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000208:	fba0 3101 	umull	r3, r1, r0, r1
 800020c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000210:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000214:	bf3e      	ittt	cc
 8000216:	0049      	lslcc	r1, r1, #1
 8000218:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800021c:	005b      	lslcc	r3, r3, #1
 800021e:	ea40 0001 	orr.w	r0, r0, r1
 8000222:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000226:	2afd      	cmp	r2, #253	; 0xfd
 8000228:	d81d      	bhi.n	8000266 <__aeabi_fmul+0x92>
 800022a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800022e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000232:	bf08      	it	eq
 8000234:	f020 0001 	biceq.w	r0, r0, #1
 8000238:	4770      	bx	lr
 800023a:	f090 0f00 	teq	r0, #0
 800023e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000242:	bf08      	it	eq
 8000244:	0249      	lsleq	r1, r1, #9
 8000246:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800024a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800024e:	3a7f      	subs	r2, #127	; 0x7f
 8000250:	bfc2      	ittt	gt
 8000252:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000256:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800025a:	4770      	bxgt	lr
 800025c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000260:	f04f 0300 	mov.w	r3, #0
 8000264:	3a01      	subs	r2, #1
 8000266:	dc5d      	bgt.n	8000324 <__aeabi_fmul+0x150>
 8000268:	f112 0f19 	cmn.w	r2, #25
 800026c:	bfdc      	itt	le
 800026e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000272:	4770      	bxle	lr
 8000274:	f1c2 0200 	rsb	r2, r2, #0
 8000278:	0041      	lsls	r1, r0, #1
 800027a:	fa21 f102 	lsr.w	r1, r1, r2
 800027e:	f1c2 0220 	rsb	r2, r2, #32
 8000282:	fa00 fc02 	lsl.w	ip, r0, r2
 8000286:	ea5f 0031 	movs.w	r0, r1, rrx
 800028a:	f140 0000 	adc.w	r0, r0, #0
 800028e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000292:	bf08      	it	eq
 8000294:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000298:	4770      	bx	lr
 800029a:	f092 0f00 	teq	r2, #0
 800029e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002a2:	bf02      	ittt	eq
 80002a4:	0040      	lsleq	r0, r0, #1
 80002a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002aa:	3a01      	subeq	r2, #1
 80002ac:	d0f9      	beq.n	80002a2 <__aeabi_fmul+0xce>
 80002ae:	ea40 000c 	orr.w	r0, r0, ip
 80002b2:	f093 0f00 	teq	r3, #0
 80002b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002ba:	bf02      	ittt	eq
 80002bc:	0049      	lsleq	r1, r1, #1
 80002be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002c2:	3b01      	subeq	r3, #1
 80002c4:	d0f9      	beq.n	80002ba <__aeabi_fmul+0xe6>
 80002c6:	ea41 010c 	orr.w	r1, r1, ip
 80002ca:	e78f      	b.n	80001ec <__aeabi_fmul+0x18>
 80002cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002d0:	ea92 0f0c 	teq	r2, ip
 80002d4:	bf18      	it	ne
 80002d6:	ea93 0f0c 	teqne	r3, ip
 80002da:	d00a      	beq.n	80002f2 <__aeabi_fmul+0x11e>
 80002dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002e0:	bf18      	it	ne
 80002e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002e6:	d1d8      	bne.n	800029a <__aeabi_fmul+0xc6>
 80002e8:	ea80 0001 	eor.w	r0, r0, r1
 80002ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002f0:	4770      	bx	lr
 80002f2:	f090 0f00 	teq	r0, #0
 80002f6:	bf17      	itett	ne
 80002f8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002fc:	4608      	moveq	r0, r1
 80002fe:	f091 0f00 	teqne	r1, #0
 8000302:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000306:	d014      	beq.n	8000332 <__aeabi_fmul+0x15e>
 8000308:	ea92 0f0c 	teq	r2, ip
 800030c:	d101      	bne.n	8000312 <__aeabi_fmul+0x13e>
 800030e:	0242      	lsls	r2, r0, #9
 8000310:	d10f      	bne.n	8000332 <__aeabi_fmul+0x15e>
 8000312:	ea93 0f0c 	teq	r3, ip
 8000316:	d103      	bne.n	8000320 <__aeabi_fmul+0x14c>
 8000318:	024b      	lsls	r3, r1, #9
 800031a:	bf18      	it	ne
 800031c:	4608      	movne	r0, r1
 800031e:	d108      	bne.n	8000332 <__aeabi_fmul+0x15e>
 8000320:	ea80 0001 	eor.w	r0, r0, r1
 8000324:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000328:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800032c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000330:	4770      	bx	lr
 8000332:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000336:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800033a:	4770      	bx	lr

0800033c <__aeabi_frsub>:
 800033c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000340:	e002      	b.n	8000348 <__addsf3>
 8000342:	bf00      	nop

08000344 <__aeabi_fsub>:
 8000344:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000348 <__addsf3>:
 8000348:	0042      	lsls	r2, r0, #1
 800034a:	bf1f      	itttt	ne
 800034c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000350:	ea92 0f03 	teqne	r2, r3
 8000354:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000358:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035c:	d06a      	beq.n	8000434 <__addsf3+0xec>
 800035e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000362:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000366:	bfc1      	itttt	gt
 8000368:	18d2      	addgt	r2, r2, r3
 800036a:	4041      	eorgt	r1, r0
 800036c:	4048      	eorgt	r0, r1
 800036e:	4041      	eorgt	r1, r0
 8000370:	bfb8      	it	lt
 8000372:	425b      	neglt	r3, r3
 8000374:	2b19      	cmp	r3, #25
 8000376:	bf88      	it	hi
 8000378:	4770      	bxhi	lr
 800037a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800037e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000382:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000386:	bf18      	it	ne
 8000388:	4240      	negne	r0, r0
 800038a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800038e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000392:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000396:	bf18      	it	ne
 8000398:	4249      	negne	r1, r1
 800039a:	ea92 0f03 	teq	r2, r3
 800039e:	d03f      	beq.n	8000420 <__addsf3+0xd8>
 80003a0:	f1a2 0201 	sub.w	r2, r2, #1
 80003a4:	fa41 fc03 	asr.w	ip, r1, r3
 80003a8:	eb10 000c 	adds.w	r0, r0, ip
 80003ac:	f1c3 0320 	rsb	r3, r3, #32
 80003b0:	fa01 f103 	lsl.w	r1, r1, r3
 80003b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003b8:	d502      	bpl.n	80003c0 <__addsf3+0x78>
 80003ba:	4249      	negs	r1, r1
 80003bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80003c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80003c4:	d313      	bcc.n	80003ee <__addsf3+0xa6>
 80003c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003ca:	d306      	bcc.n	80003da <__addsf3+0x92>
 80003cc:	0840      	lsrs	r0, r0, #1
 80003ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80003d2:	f102 0201 	add.w	r2, r2, #1
 80003d6:	2afe      	cmp	r2, #254	; 0xfe
 80003d8:	d251      	bcs.n	800047e <__addsf3+0x136>
 80003da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80003de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003e2:	bf08      	it	eq
 80003e4:	f020 0001 	biceq.w	r0, r0, #1
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	4770      	bx	lr
 80003ee:	0049      	lsls	r1, r1, #1
 80003f0:	eb40 0000 	adc.w	r0, r0, r0
 80003f4:	3a01      	subs	r2, #1
 80003f6:	bf28      	it	cs
 80003f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003fc:	d2ed      	bcs.n	80003da <__addsf3+0x92>
 80003fe:	fab0 fc80 	clz	ip, r0
 8000402:	f1ac 0c08 	sub.w	ip, ip, #8
 8000406:	ebb2 020c 	subs.w	r2, r2, ip
 800040a:	fa00 f00c 	lsl.w	r0, r0, ip
 800040e:	bfaa      	itet	ge
 8000410:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000414:	4252      	neglt	r2, r2
 8000416:	4318      	orrge	r0, r3
 8000418:	bfbc      	itt	lt
 800041a:	40d0      	lsrlt	r0, r2
 800041c:	4318      	orrlt	r0, r3
 800041e:	4770      	bx	lr
 8000420:	f092 0f00 	teq	r2, #0
 8000424:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000428:	bf06      	itte	eq
 800042a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800042e:	3201      	addeq	r2, #1
 8000430:	3b01      	subne	r3, #1
 8000432:	e7b5      	b.n	80003a0 <__addsf3+0x58>
 8000434:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000438:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800043c:	bf18      	it	ne
 800043e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000442:	d021      	beq.n	8000488 <__addsf3+0x140>
 8000444:	ea92 0f03 	teq	r2, r3
 8000448:	d004      	beq.n	8000454 <__addsf3+0x10c>
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf08      	it	eq
 8000450:	4608      	moveq	r0, r1
 8000452:	4770      	bx	lr
 8000454:	ea90 0f01 	teq	r0, r1
 8000458:	bf1c      	itt	ne
 800045a:	2000      	movne	r0, #0
 800045c:	4770      	bxne	lr
 800045e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000462:	d104      	bne.n	800046e <__addsf3+0x126>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	bf28      	it	cs
 8000468:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800046c:	4770      	bx	lr
 800046e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000472:	bf3c      	itt	cc
 8000474:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000478:	4770      	bxcc	lr
 800047a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800047e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000482:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000486:	4770      	bx	lr
 8000488:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800048c:	bf16      	itet	ne
 800048e:	4608      	movne	r0, r1
 8000490:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000494:	4601      	movne	r1, r0
 8000496:	0242      	lsls	r2, r0, #9
 8000498:	bf06      	itte	eq
 800049a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800049e:	ea90 0f01 	teqeq	r0, r1
 80004a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004a6:	4770      	bx	lr

080004a8 <__aeabi_ui2f>:
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	e004      	b.n	80004b8 <__aeabi_i2f+0x8>
 80004ae:	bf00      	nop

080004b0 <__aeabi_i2f>:
 80004b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80004b4:	bf48      	it	mi
 80004b6:	4240      	negmi	r0, r0
 80004b8:	ea5f 0c00 	movs.w	ip, r0
 80004bc:	bf08      	it	eq
 80004be:	4770      	bxeq	lr
 80004c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80004c4:	4601      	mov	r1, r0
 80004c6:	f04f 0000 	mov.w	r0, #0
 80004ca:	e01c      	b.n	8000506 <__aeabi_l2f+0x2a>

080004cc <__aeabi_ul2f>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	f04f 0300 	mov.w	r3, #0
 80004d8:	e00a      	b.n	80004f0 <__aeabi_l2f+0x14>
 80004da:	bf00      	nop

080004dc <__aeabi_l2f>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80004e8:	d502      	bpl.n	80004f0 <__aeabi_l2f+0x14>
 80004ea:	4240      	negs	r0, r0
 80004ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f0:	ea5f 0c01 	movs.w	ip, r1
 80004f4:	bf02      	ittt	eq
 80004f6:	4684      	moveq	ip, r0
 80004f8:	4601      	moveq	r1, r0
 80004fa:	2000      	moveq	r0, #0
 80004fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000500:	bf08      	it	eq
 8000502:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000506:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800050a:	fabc f28c 	clz	r2, ip
 800050e:	3a08      	subs	r2, #8
 8000510:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000514:	db10      	blt.n	8000538 <__aeabi_l2f+0x5c>
 8000516:	fa01 fc02 	lsl.w	ip, r1, r2
 800051a:	4463      	add	r3, ip
 800051c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000520:	f1c2 0220 	rsb	r2, r2, #32
 8000524:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000528:	fa20 f202 	lsr.w	r2, r0, r2
 800052c:	eb43 0002 	adc.w	r0, r3, r2
 8000530:	bf08      	it	eq
 8000532:	f020 0001 	biceq.w	r0, r0, #1
 8000536:	4770      	bx	lr
 8000538:	f102 0220 	add.w	r2, r2, #32
 800053c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000540:	f1c2 0220 	rsb	r2, r2, #32
 8000544:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000548:	fa21 f202 	lsr.w	r2, r1, r2
 800054c:	eb43 0002 	adc.w	r0, r3, r2
 8000550:	bf08      	it	eq
 8000552:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000556:	4770      	bx	lr

08000558 <__gesf2>:
 8000558:	f04f 3cff 	mov.w	ip, #4294967295
 800055c:	e006      	b.n	800056c <__cmpsf2+0x4>
 800055e:	bf00      	nop

08000560 <__lesf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	e002      	b.n	800056c <__cmpsf2+0x4>
 8000566:	bf00      	nop

08000568 <__cmpsf2>:
 8000568:	f04f 0c01 	mov.w	ip, #1
 800056c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000570:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000574:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000578:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800057c:	bf18      	it	ne
 800057e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000582:	d011      	beq.n	80005a8 <__cmpsf2+0x40>
 8000584:	b001      	add	sp, #4
 8000586:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800058a:	bf18      	it	ne
 800058c:	ea90 0f01 	teqne	r0, r1
 8000590:	bf58      	it	pl
 8000592:	ebb2 0003 	subspl.w	r0, r2, r3
 8000596:	bf88      	it	hi
 8000598:	17c8      	asrhi	r0, r1, #31
 800059a:	bf38      	it	cc
 800059c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80005a0:	bf18      	it	ne
 80005a2:	f040 0001 	orrne.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005ac:	d102      	bne.n	80005b4 <__cmpsf2+0x4c>
 80005ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80005b2:	d105      	bne.n	80005c0 <__cmpsf2+0x58>
 80005b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80005b8:	d1e4      	bne.n	8000584 <__cmpsf2+0x1c>
 80005ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80005be:	d0e1      	beq.n	8000584 <__cmpsf2+0x1c>
 80005c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <__aeabi_cfrcmple>:
 80005c8:	4684      	mov	ip, r0
 80005ca:	4608      	mov	r0, r1
 80005cc:	4661      	mov	r1, ip
 80005ce:	e7ff      	b.n	80005d0 <__aeabi_cfcmpeq>

080005d0 <__aeabi_cfcmpeq>:
 80005d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80005d2:	f7ff ffc9 	bl	8000568 <__cmpsf2>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	bf48      	it	mi
 80005da:	f110 0f00 	cmnmi.w	r0, #0
 80005de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080005e0 <__aeabi_fcmpeq>:
 80005e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e4:	f7ff fff4 	bl	80005d0 <__aeabi_cfcmpeq>
 80005e8:	bf0c      	ite	eq
 80005ea:	2001      	moveq	r0, #1
 80005ec:	2000      	movne	r0, #0
 80005ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f2:	bf00      	nop

080005f4 <__aeabi_fcmplt>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff ffea 	bl	80005d0 <__aeabi_cfcmpeq>
 80005fc:	bf34      	ite	cc
 80005fe:	2001      	movcc	r0, #1
 8000600:	2000      	movcs	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <__aeabi_fcmple>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff ffe0 	bl	80005d0 <__aeabi_cfcmpeq>
 8000610:	bf94      	ite	ls
 8000612:	2001      	movls	r0, #1
 8000614:	2000      	movhi	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_fcmpge>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffd2 	bl	80005c8 <__aeabi_cfrcmple>
 8000624:	bf94      	ite	ls
 8000626:	2001      	movls	r0, #1
 8000628:	2000      	movhi	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_fcmpgt>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffc8 	bl	80005c8 <__aeabi_cfrcmple>
 8000638:	bf34      	ite	cc
 800063a:	2001      	movcc	r0, #1
 800063c:	2000      	movcs	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_f2iz>:
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800064c:	d30f      	bcc.n	800066e <__aeabi_f2iz+0x2a>
 800064e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000652:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000656:	d90d      	bls.n	8000674 <__aeabi_f2iz+0x30>
 8000658:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800065c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000660:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000664:	fa23 f002 	lsr.w	r0, r3, r2
 8000668:	bf18      	it	ne
 800066a:	4240      	negne	r0, r0
 800066c:	4770      	bx	lr
 800066e:	f04f 0000 	mov.w	r0, #0
 8000672:	4770      	bx	lr
 8000674:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000678:	d101      	bne.n	800067e <__aeabi_f2iz+0x3a>
 800067a:	0242      	lsls	r2, r0, #9
 800067c:	d105      	bne.n	800068a <__aeabi_f2iz+0x46>
 800067e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000682:	bf08      	it	eq
 8000684:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000688:	4770      	bx	lr
 800068a:	f04f 0000 	mov.w	r0, #0
 800068e:	4770      	bx	lr

08000690 <GPIO_EnableClock>:

unsigned int *lookuptable[2][10]={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_OSPEEDR ,GPIOA_PUPDR,GPIOA_IDR,GPIOA_ODR ,GPIOA_BSRR ,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
		                          {GPIOB_MODER,GPIOB_OTYPER,GPIOB_OSPEEDR ,GPIOB_PUPDR,GPIOB_IDR,GPIOB_ODR ,GPIOB_BSRR ,GPIOB_LCKR,GPIOB_BFRL, GPIOB_BFRH}};


void GPIO_EnableClock(unsigned char PORT_ID) {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]

	  *RCC_AHB1ENR |= (0x01 << PORT_ID);
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <GPIO_EnableClock+0x28>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	2101      	movs	r1, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <GPIO_EnableClock+0x28>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]


}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40023830 	.word	0x40023830

080006bc <GPIO_Init>:

void GPIO_Init(unsigned char PORT_ID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 80006bc:	b490      	push	{r4, r7}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4604      	mov	r4, r0
 80006c4:	4608      	mov	r0, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	461a      	mov	r2, r3
 80006ca:	4623      	mov	r3, r4
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	4603      	mov	r3, r0
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	460b      	mov	r3, r1
 80006d4:	717b      	strb	r3, [r7, #5]
 80006d6:	4613      	mov	r3, r2
 80006d8:	713b      	strb	r3, [r7, #4]

      *lookuptable[PORT_ID][0] &= ~(0x03 << 2 * PinNum);
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	4956      	ldr	r1, [pc, #344]	; (8000838 <GPIO_Init+0x17c>)
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	440b      	add	r3, r1
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2203      	movs	r2, #3
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	461c      	mov	r4, r3
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	484e      	ldr	r0, [pc, #312]	; (8000838 <GPIO_Init+0x17c>)
 80006fe:	4613      	mov	r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	4403      	add	r3, r0
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	ea01 0204 	and.w	r2, r1, r4
 800070e:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][0] |= PinMode << 2 * PinNum;
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	4949      	ldr	r1, [pc, #292]	; (8000838 <GPIO_Init+0x17c>)
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	440b      	add	r3, r1
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6819      	ldr	r1, [r3, #0]
 8000722:	797a      	ldrb	r2, [r7, #5]
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	461c      	mov	r4, r3
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	4841      	ldr	r0, [pc, #260]	; (8000838 <GPIO_Init+0x17c>)
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4403      	add	r3, r0
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	ea41 0204 	orr.w	r2, r1, r4
 8000742:	601a      	str	r2, [r3, #0]

      *lookuptable[PORT_ID][1] &= ~(1 << PinNum);
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	493c      	ldr	r1, [pc, #240]	; (8000838 <GPIO_Init+0x17c>)
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	440b      	add	r3, r1
 8000752:	3304      	adds	r3, #4
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2201      	movs	r2, #1
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	461c      	mov	r4, r3
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	4834      	ldr	r0, [pc, #208]	; (8000838 <GPIO_Init+0x17c>)
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4403      	add	r3, r0
 8000772:	3304      	adds	r3, #4
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	ea01 0204 	and.w	r2, r1, r4
 800077a:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 800077c:	79fa      	ldrb	r2, [r7, #7]
 800077e:	492e      	ldr	r1, [pc, #184]	; (8000838 <GPIO_Init+0x17c>)
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3304      	adds	r3, #4
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6819      	ldr	r1, [r3, #0]
 8000790:	793b      	ldrb	r3, [r7, #4]
 8000792:	f003 0201 	and.w	r2, r3, #1
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	461c      	mov	r4, r3
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <GPIO_Init+0x17c>)
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4403      	add	r3, r0
 80007ac:	3304      	adds	r3, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	ea41 0204 	orr.w	r2, r1, r4
 80007b4:	601a      	str	r2, [r3, #0]

      *lookuptable[PORT_ID][3] &= ~(0x03 << 2 * PinNum);
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	491f      	ldr	r1, [pc, #124]	; (8000838 <GPIO_Init+0x17c>)
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	440b      	add	r3, r1
 80007c4:	330c      	adds	r3, #12
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	2203      	movs	r2, #3
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	461c      	mov	r4, r3
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	4817      	ldr	r0, [pc, #92]	; (8000838 <GPIO_Init+0x17c>)
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4403      	add	r3, r0
 80007e6:	330c      	adds	r3, #12
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	ea01 0204 	and.w	r2, r1, r4
 80007ee:	601a      	str	r2, [r3, #0]
      *lookuptable[PORT_ID][3] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	4911      	ldr	r1, [pc, #68]	; (8000838 <GPIO_Init+0x17c>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	330c      	adds	r3, #12
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	793b      	ldrb	r3, [r7, #4]
 8000806:	105b      	asrs	r3, r3, #1
 8000808:	f003 0203 	and.w	r2, r3, #3
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	461c      	mov	r4, r3
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <GPIO_Init+0x17c>)
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4403      	add	r3, r0
 8000824:	330c      	adds	r3, #12
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	ea41 0204 	orr.w	r2, r1, r4
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bc90      	pop	{r4, r7}
 8000836:	4770      	bx	lr
 8000838:	20000000 	.word	0x20000000

0800083c <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PORT_ID, unsigned char PinNum,
                            unsigned char Data) {
 800083c:	b490      	push	{r4, r7}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	460b      	mov	r3, r1
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	4613      	mov	r3, r2
 800084c:	717b      	strb	r3, [r7, #5]
  unsigned char result;
      if (((*lookuptable[PORT_ID][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	492c      	ldr	r1, [pc, #176]	; (8000904 <GPIO_WritePin+0xc8>)
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	2103      	movs	r1, #3
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	401a      	ands	r2, r3
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa22 f303 	lsr.w	r3, r2, r3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d13d      	bne.n	80008f4 <GPIO_WritePin+0xb8>
        if (Data) {
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d01b      	beq.n	80008b6 <GPIO_WritePin+0x7a>
        	*lookuptable[PORT_ID][5] |= (1 << PinNum);
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	4920      	ldr	r1, [pc, #128]	; (8000904 <GPIO_WritePin+0xc8>)
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3314      	adds	r3, #20
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	2201      	movs	r2, #1
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	461c      	mov	r4, r3
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <GPIO_WritePin+0xc8>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4403      	add	r3, r0
 80008aa:	3314      	adds	r3, #20
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	ea41 0204 	orr.w	r2, r1, r4
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e01b      	b.n	80008ee <GPIO_WritePin+0xb2>
        } else {
        	*lookuptable[PORT_ID][5] &= ~(1 << PinNum);
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	4912      	ldr	r1, [pc, #72]	; (8000904 <GPIO_WritePin+0xc8>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	3314      	adds	r3, #20
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6819      	ldr	r1, [r3, #0]
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	2201      	movs	r2, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	461c      	mov	r4, r3
 80008d6:	79fa      	ldrb	r2, [r7, #7]
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <GPIO_WritePin+0xc8>)
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	4403      	add	r3, r0
 80008e4:	3314      	adds	r3, #20
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	ea01 0204 	and.w	r2, r1, r4
 80008ec:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	e001      	b.n	80008f8 <GPIO_WritePin+0xbc>
      } else {
        result = NOK;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
      }

  return result;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	20000000 	.word	0x20000000

08000908 <Handle_data>:
float pid_T = 0.5f;    /*Time in sec*/
float pid_prevout=0.0f;
float pid_out=0.0f;

float Handle_data(float data)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	/*
	* Error signal
	*/
    float error = setpoint-data;
 8000910:	4b47      	ldr	r3, [pc, #284]	; (8000a30 <Handle_data+0x128>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fd14 	bl	8000344 <__aeabi_fsub>
 800091c:	4603      	mov	r3, r0
 800091e:	60fb      	str	r3, [r7, #12]

	/*
	* Proportional
	*/
    float proportional = pid_Kp * error;
 8000920:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <Handle_data+0x12c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fc54 	bl	80001d4 <__aeabi_fmul>
 800092c:	4603      	mov	r3, r0
 800092e:	60bb      	str	r3, [r7, #8]


	/*
	* Integral
	*/
    pid_integrator = pid_integrator + 0.5f * pid_Ki * pid_T * (error + pid_prevError);
 8000930:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <Handle_data+0x130>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc4b 	bl	80001d4 <__aeabi_fmul>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <Handle_data+0x134>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fc43 	bl	80001d4 <__aeabi_fmul>
 800094e:	4603      	mov	r3, r0
 8000950:	461c      	mov	r4, r3
 8000952:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <Handle_data+0x138>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68f9      	ldr	r1, [r7, #12]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fcf5 	bl	8000348 <__addsf3>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff fc36 	bl	80001d4 <__aeabi_fmul>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <Handle_data+0x13c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4610      	mov	r0, r2
 8000974:	f7ff fce8 	bl	8000348 <__addsf3>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <Handle_data+0x13c>)
 800097e:	601a      	str	r2, [r3, #0]

	/* Anti-wind-up via integrator clamping */
    if (pid_integrator > PID_LIM_MAX) {
 8000980:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <Handle_data+0x13c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a30      	ldr	r2, [pc, #192]	; (8000a48 <Handle_data+0x140>)
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe50 	bl	8000630 <__aeabi_fcmpgt>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <Handle_data+0x98>

        pid_integrator = PID_LIM_MAX;
 8000996:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <Handle_data+0x140>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <Handle_data+0x13c>)
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	e00e      	b.n	80009be <Handle_data+0xb6>

    } else if (pid_integrator < PID_LIM_MAX) {
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <Handle_data+0x13c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <Handle_data+0x140>)
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe22 	bl	80005f4 <__aeabi_fcmplt>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <Handle_data+0xb6>

        pid_integrator = PID_LIM_MAX;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <Handle_data+0x140>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <Handle_data+0x13c>)
 80009bc:	6013      	str	r3, [r2, #0]
    }

	/*
	* Compute output and apply limits
	*/
    pid_out = proportional + pid_integrator ;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <Handle_data+0x13c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fcbf 	bl	8000348 <__addsf3>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <Handle_data+0x144>)
 80009d0:	601a      	str	r2, [r3, #0]

    if (pid_out > pid_limMax) {
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <Handle_data+0x144>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <Handle_data+0x148>)
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe27 	bl	8000630 <__aeabi_fcmpgt>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <Handle_data+0xe8>

    	pid_out = 0.73f;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <Handle_data+0x144>)
 80009ea:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <Handle_data+0x14c>)
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e00e      	b.n	8000a0e <Handle_data+0x106>

    }else if (pid_out <= pid_limMax) {
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <Handle_data+0x144>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <Handle_data+0x148>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe04 	bl	8000608 <__aeabi_fcmple>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <Handle_data+0x106>

    	pid_out = 0.0f;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <Handle_data+0x144>)
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
    }



	/* Store error and measurement or later use */
    pid_prevError       = error;
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <Handle_data+0x138>)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6013      	str	r3, [r2, #0]
    pid_prevMeasurement = data;
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <Handle_data+0x150>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
    pid_prevout=pid_out;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <Handle_data+0x144>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <Handle_data+0x154>)
 8000a20:	6013      	str	r3, [r2, #0]

	/* Return controller output */

    return (pid_out);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <Handle_data+0x144>)
 8000a24:	681b      	ldr	r3, [r3, #0]

}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000050 	.word	0x20000050
 8000a34:	2000005c 	.word	0x2000005c
 8000a38:	20000060 	.word	0x20000060
 8000a3c:	20000068 	.word	0x20000068
 8000a40:	2000009c 	.word	0x2000009c
 8000a44:	20000098 	.word	0x20000098
 8000a48:	20000058 	.word	0x20000058
 8000a4c:	200000ac 	.word	0x200000ac
 8000a50:	20000064 	.word	0x20000064
 8000a54:	3f3ae148 	.word	0x3f3ae148
 8000a58:	200000a0 	.word	0x200000a0
 8000a5c:	200000a8 	.word	0x200000a8

08000a60 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <NVIC_EnableIRQ+0x2c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <StartTimer>:
#include "stm32f4xx.h"
#include "poller.h"


void StartTimer(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	/*Enable timer 2*/
	RCC->APB1ENR |=(1u<<0);
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <StartTimer+0x48>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <StartTimer+0x48>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600-1;
 8000aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa4:	f240 623f 	movw	r2, #1599	; 0x63f
 8000aa8:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aae:	2264      	movs	r2, #100	; 0x64
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clear timer counter*/
	TIM2->CNT = 0;
 8000ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable  timer*/
	TIM2->CR1 |= (1u<<0);
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	8013      	strh	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <EnableInterrupt>:
void StopTimer(void)
{
	TIM2->CR1 &= ~(1u<<0);
}
void EnableInterrupt(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	/*Enable timer interrupt*/
	TIM2->DIER |= (1<<0);
 8000ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae4:	899b      	ldrh	r3, [r3, #12]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	8193      	strh	r3, [r2, #12]
	/*Enable timer interrupt NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 8000af4:	201c      	movs	r0, #28
 8000af6:	f7ff ffb3 	bl	8000a60 <NVIC_EnableIRQ>

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <CallPollingFunction>:
	/*Enable timer interrupt*/
	TIM2->DIER &= ~(1u<<0);
}

void CallPollingFunction(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
	Poll();
 8000b02:	f000 f977 	bl	8000df4 <Poll>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <SPI_EnableClock>:
#include "SPI.h"
#include "RCC.h"

void SPI_EnableClock()
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (0x01 << 12);
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SPI_EnableClock+0x18>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <SPI_EnableClock+0x18>)
 8000b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40023844 	.word	0x40023844

08000b28 <SPI_Init>:

void SPI_Init(unsigned char MasterSlave, unsigned char ClkPol, unsigned char ClkPhase)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	460b      	mov	r3, r1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	4613      	mov	r3, r2
 8000b38:	717b      	strb	r3, [r7, #5]
	SPI1_CR1 |= (0x3 << 8);
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <SPI_Init+0x6c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <SPI_Init+0x6c>)
 8000b40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b44:	6013      	str	r3, [r2, #0]

	SPI1_CR1 |= (MasterSlave << 2);
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SPI_Init+0x6c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	79fa      	ldrb	r2, [r7, #7]
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <SPI_Init+0x6c>)
 8000b52:	430b      	orrs	r3, r1
 8000b54:	6013      	str	r3, [r2, #0]

	SPI1_CR1 |= (ClkPol << 1);
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <SPI_Init+0x6c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <SPI_Init+0x6c>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6013      	str	r3, [r2, #0]

	SPI1_CR1 |= (ClkPhase << 0);
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <SPI_Init+0x6c>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	797b      	ldrb	r3, [r7, #5]
 8000b6c:	4909      	ldr	r1, [pc, #36]	; (8000b94 <SPI_Init+0x6c>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]

	SPI1_CR1 |= (0x3 << 3);
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SPI_Init+0x6c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <SPI_Init+0x6c>)
 8000b78:	f043 0318 	orr.w	r3, r3, #24
 8000b7c:	6013      	str	r3, [r2, #0]

	SPI1_CR1 |= (1 << 6);
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SPI_Init+0x6c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <SPI_Init+0x6c>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40013000 	.word	0x40013000

08000b98 <SPI_TransmitRecieveByte>:

unsigned char SPI_TransmitRecieveByte(unsigned char TxData)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if (SPI1_SR & (1 << 1))
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <SPI_TransmitRecieveByte+0x40>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00d      	beq.n	8000bca <SPI_TransmitRecieveByte+0x32>
	{
		SPI1_DR = TxData;
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <SPI_TransmitRecieveByte+0x44>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	6013      	str	r3, [r2, #0]
		while (SPI1_SR & (1 << 7))
 8000bb4:	bf00      	nop
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SPI_TransmitRecieveByte+0x40>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f9      	bne.n	8000bb6 <SPI_TransmitRecieveByte+0x1e>
		{
		}
		return SPI1_DR;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SPI_TransmitRecieveByte+0x44>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	e000      	b.n	8000bcc <SPI_TransmitRecieveByte+0x34>
	}
	return -1;
 8000bca:	23ff      	movs	r3, #255	; 0xff
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40013008 	.word	0x40013008
 8000bdc:	4001300c 	.word	0x4001300c

08000be0 <TC72_Init>:
#include "TC72.h"
#include "SPI.h"
#include "Util.h"


void TC72_Init(unsigned char Mode) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]

    TC72_RegisterWrite(0x80, 0x00);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2080      	movs	r0, #128	; 0x80
 8000bee:	f000 f804 	bl	8000bfa <TC72_RegisterWrite>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <TC72_RegisterWrite>:

void TC72_RegisterWrite(unsigned char RegAdd, unsigned char Data) {
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	460a      	mov	r2, r1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71bb      	strb	r3, [r7, #6]
  SPI_TransmitRecieveByte(RegAdd | (1 << 7));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffc0 	bl	8000b98 <SPI_TransmitRecieveByte>
  SPI_TransmitRecieveByte(Data);
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffbc 	bl	8000b98 <SPI_TransmitRecieveByte>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <TC72_RegisterRead>:

void TC72_RegisterRead(unsigned char RegAdd, unsigned char* DataPtr) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
    SPI_TransmitRecieveByte(RegAdd & (~(1 << 7)));
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffab 	bl	8000b98 <SPI_TransmitRecieveByte>
    *DataPtr = SPI_TransmitRecieveByte(0x00);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff ffa8 	bl	8000b98 <SPI_TransmitRecieveByte>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	701a      	strb	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <USART_EnableClock>:
#include "USART.h"
#include "GPIO.h"


void USART_EnableClock(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	*RCC_APB1ENR  |= (1 << 17);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <USART_EnableClock+0x18>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <USART_EnableClock+0x18>)
 8000c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c66:	6013      	str	r3, [r2, #0]

}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40023840 	.word	0x40023840

08000c74 <USART_INIT>:

void USART_INIT(void)

{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	*GPIOA_AFRL   |= (0x07 << 8) ;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <USART_INIT+0x5c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <USART_INIT+0x5c>)
 8000c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c82:	6013      	str	r3, [r2, #0]
	*USART_CR1    |= (1 << 13);
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <USART_INIT+0x60>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <USART_INIT+0x60>)
 8000c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c8e:	6013      	str	r3, [r2, #0]
	*USART_CR1    |= (1 << 3);
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <USART_INIT+0x60>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <USART_INIT+0x60>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6013      	str	r3, [r2, #0]
	*USART_CR1    &= ~(1 << 15);
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <USART_INIT+0x60>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <USART_INIT+0x60>)
 8000ca2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ca6:	6013      	str	r3, [r2, #0]
    *USART_CR1    &= ~(1 << 12);
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <USART_INIT+0x60>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <USART_INIT+0x60>)
 8000cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cb2:	6013      	str	r3, [r2, #0]
  	*USART_CR2    &= ~(0x3 << 12);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <USART_INIT+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <USART_INIT+0x64>)
 8000cba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cbe:	6013      	str	r3, [r2, #0]
	*USART_BRR     = 0x683;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <USART_INIT+0x68>)
 8000cc2:	f240 6283 	movw	r2, #1667	; 0x683
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40020020 	.word	0x40020020
 8000cd4:	4000440c 	.word	0x4000440c
 8000cd8:	40004410 	.word	0x40004410
 8000cdc:	40004408 	.word	0x40004408

08000ce0 <USART_TRANSMIT>:


void USART_TRANSMIT(char *str)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    while (*str != '\0')
 8000ce8:	e00c      	b.n	8000d04 <USART_TRANSMIT+0x24>
    {
        while (((*USART_SR >> 6) & 1))
        {
            *USART_DR = *str;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <USART_TRANSMIT+0x38>)
 8000cf0:	601a      	str	r2, [r3, #0]
            str++;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
        while (((*USART_SR >> 6) & 1))
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <USART_TRANSMIT+0x3c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f2      	bne.n	8000cea <USART_TRANSMIT+0xa>
    while (*str != '\0')
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f5      	bne.n	8000cf8 <USART_TRANSMIT+0x18>
        }
    }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40004404 	.word	0x40004404
 8000d1c:	40004400 	.word	0x40004400

08000d20 <Get_Data>:
unsigned char spiData = 0;
float temperature = 0.0f ;


float Get_Data(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	TC72_SELECT();
 8000d24:	2201      	movs	r2, #1
 8000d26:	2100      	movs	r1, #0
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fd87 	bl	800083c <GPIO_WritePin>
	TC72_Init(0);       /*write zeros in control register*/
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff56 	bl	8000be0 <TC72_Init>
	TC72_UNSELECT();   /*choose TC72*/
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fd7f 	bl	800083c <GPIO_WritePin>

    temperature = 0.0f;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <Get_Data+0xcc>)
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]

    TC72_SELECT();
 8000d46:	2201      	movs	r2, #1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fd76 	bl	800083c <GPIO_WritePin>
    TC72_RegisterRead(0x01, &spiData);
 8000d50:	4927      	ldr	r1, [pc, #156]	; (8000df0 <Get_Data+0xd0>)
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff ff68 	bl	8000c28 <TC72_RegisterRead>
    TC72_UNSELECT();
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fd6d 	bl	800083c <GPIO_WritePin>

    if (spiData & (1 << 7)) {
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <Get_Data+0xd0>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da0a      	bge.n	8000d82 <Get_Data+0x62>
      temperature += 0.5f;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <Get_Data+0xcc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fae7 	bl	8000348 <__addsf3>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <Get_Data+0xcc>)
 8000d80:	601a      	str	r2, [r3, #0]
    }
    if (spiData & (1 << 6)) {
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <Get_Data+0xd0>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00a      	beq.n	8000da4 <Get_Data+0x84>
      temperature += 0.25f;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <Get_Data+0xcc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fad6 	bl	8000348 <__addsf3>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <Get_Data+0xcc>)
 8000da2:	601a      	str	r2, [r3, #0]
    }

    TC72_SELECT();
 8000da4:	2201      	movs	r2, #1
 8000da6:	2100      	movs	r1, #0
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fd47 	bl	800083c <GPIO_WritePin>
    TC72_RegisterRead(0x02, &spiData);
 8000dae:	4910      	ldr	r1, [pc, #64]	; (8000df0 <Get_Data+0xd0>)
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff ff39 	bl	8000c28 <TC72_RegisterRead>
    TC72_UNSELECT();
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fd3e 	bl	800083c <GPIO_WritePin>

    temperature += (signed char)spiData;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <Get_Data+0xd0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb72 	bl	80004b0 <__aeabi_i2f>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <Get_Data+0xcc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	f7ff fab7 	bl	8000348 <__addsf3>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b03      	ldr	r3, [pc, #12]	; (8000dec <Get_Data+0xcc>)
 8000de0:	601a      	str	r2, [r3, #0]
    return temperature;
 8000de2:	4b02      	ldr	r3, [pc, #8]	; (8000dec <Get_Data+0xcc>)
 8000de4:	681b      	ldr	r3, [r3, #0]

}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000b4 	.word	0x200000b4
 8000df0:	200000b0 	.word	0x200000b0

08000df4 <Poll>:
int counter = 0 ;
char usart2TempData[] = {' ', '.', ' ', ' ', '\r', '\n', '\0'};


void Poll(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	if(polling_enabled && (!counter))
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <Poll+0x5c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d011      	beq.n	8000e26 <Poll+0x32>
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <Poll+0x60>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10d      	bne.n	8000e26 <Poll+0x32>
	{
		float data;
		data = Get_Data();
 8000e0a:	f7ff ff89 	bl	8000d20 <Get_Data>
 8000e0e:	6078      	str	r0, [r7, #4]
		float pid_out;
		pid_out=Handle_data(data);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fd79 	bl	8000908 <Handle_data>
 8000e16:	6038      	str	r0, [r7, #0]
	    floatToStr(pid_out, usart2TempData);
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <Poll+0x64>)
 8000e1a:	6838      	ldr	r0, [r7, #0]
 8000e1c:	f000 f842 	bl	8000ea4 <floatToStr>
	    USART_TRANSMIT(usart2TempData);
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <Poll+0x64>)
 8000e22:	f7ff ff5d 	bl	8000ce0 <USART_TRANSMIT>


	}
	counter++;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <Poll+0x60>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <Poll+0x60>)
 8000e2e:	6013      	str	r3, [r2, #0]
	counter = counter%polling_counter;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <Poll+0x60>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <Poll+0x68>)
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e3c:	fb02 f201 	mul.w	r2, r2, r1
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <Poll+0x60>)
 8000e44:	6013      	str	r3, [r2, #0]
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000006c 	.word	0x2000006c
 8000e54:	200000b8 	.word	0x200000b8
 8000e58:	20000074 	.word	0x20000074
 8000e5c:	20000070 	.word	0x20000070

08000e60 <StartPolling>:

void StartPolling(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	polling_enabled=1;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <StartPolling+0x14>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000006c 	.word	0x2000006c

08000e78 <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int polling_time)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	polling_counter = polling_time/100;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <SetPollingTime+0x24>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1152      	asrs	r2, r2, #5
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <SetPollingTime+0x28>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	51eb851f 	.word	0x51eb851f
 8000ea0:	20000070 	.word	0x20000070

08000ea4 <floatToStr>:

void floatToStr(float val, char data[]) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  int intVal = val * 100;
 8000eae:	4931      	ldr	r1, [pc, #196]	; (8000f74 <floatToStr+0xd0>)
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff f98f 	bl	80001d4 <__aeabi_fmul>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fbc3 	bl	8000644 <__aeabi_f2iz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60fb      	str	r3, [r7, #12]
  data[3] = (intVal % 10) + '0';
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <floatToStr+0xd4>)
 8000ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eca:	1099      	asrs	r1, r3, #2
 8000ecc:	17d3      	asrs	r3, r2, #31
 8000ece:	1ac9      	subs	r1, r1, r3
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	1ad1      	subs	r1, r2, r3
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	3303      	adds	r3, #3
 8000ee0:	3230      	adds	r2, #48	; 0x30
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	701a      	strb	r2, [r3, #0]
  intVal /= 10;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <floatToStr+0xd4>)
 8000eea:	fb82 1203 	smull	r1, r2, r2, r3
 8000eee:	1092      	asrs	r2, r2, #2
 8000ef0:	17db      	asrs	r3, r3, #31
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	60fb      	str	r3, [r7, #12]
  data[2] = (intVal % 10) + '0';
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <floatToStr+0xd4>)
 8000efa:	fb83 1302 	smull	r1, r3, r3, r2
 8000efe:	1099      	asrs	r1, r3, #2
 8000f00:	17d3      	asrs	r3, r2, #31
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	460b      	mov	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	1ad1      	subs	r1, r2, r3
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3302      	adds	r3, #2
 8000f14:	3230      	adds	r2, #48	; 0x30
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	701a      	strb	r2, [r3, #0]
  data[1] = '.';
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	222e      	movs	r2, #46	; 0x2e
 8000f20:	701a      	strb	r2, [r3, #0]
  intVal /= 10;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <floatToStr+0xd4>)
 8000f26:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2a:	1092      	asrs	r2, r2, #2
 8000f2c:	17db      	asrs	r3, r3, #31
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	60fb      	str	r3, [r7, #12]
  data[0] = (intVal % 10) + '0';
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <floatToStr+0xd4>)
 8000f36:	fb83 1302 	smull	r1, r3, r3, r2
 8000f3a:	1099      	asrs	r1, r3, #2
 8000f3c:	17d3      	asrs	r3, r2, #31
 8000f3e:	1ac9      	subs	r1, r1, r3
 8000f40:	460b      	mov	r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	1ad1      	subs	r1, r2, r3
 8000f4a:	b2cb      	uxtb	r3, r1
 8000f4c:	3330      	adds	r3, #48	; 0x30
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	701a      	strb	r2, [r3, #0]



  data[4] = '\r';
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	3304      	adds	r3, #4
 8000f58:	220d      	movs	r2, #13
 8000f5a:	701a      	strb	r2, [r3, #0]
  data[5] = '\n';
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	3305      	adds	r3, #5
 8000f60:	220a      	movs	r2, #10
 8000f62:	701a      	strb	r2, [r3, #0]
  data[6] = '\0';
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3306      	adds	r3, #6
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	42c80000 	.word	0x42c80000
 8000f78:	66666667 	.word	0x66666667

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <main>:
#include "GPIO.h"
#include "USART.h"
#include "SPI.h"
#include "device.h"
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    GPIO_EnableClock(0);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fb7f 	bl	8000690 <GPIO_EnableClock>
    GPIO_Init(0, 2, ALTERNATE_FUN, PUSH_PULL);   /*USART Terimnal*/
 8000f92:	2300      	movs	r3, #0
 8000f94:	2202      	movs	r2, #2
 8000f96:	2102      	movs	r1, #2
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fb8f 	bl	80006bc <GPIO_Init>
    USART_EnableClock();
 8000f9e:	f7ff fe5b 	bl	8000c58 <USART_EnableClock>
    USART_INIT();
 8000fa2:	f7ff fe67 	bl	8000c74 <USART_INIT>

	GPIO_EnableClock(1);         /*Init Port B PIN 0 for sensor chip select*/
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff fb72 	bl	8000690 <GPIO_EnableClock>
	GPIO_Init(1, 0, OUTPUT, PUSH_PULL);
 8000fac:	2300      	movs	r3, #0
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fb82 	bl	80006bc <GPIO_Init>


	GPIO_EnableClock(0);         /*Init port A pin 5,6,7 for TC72 spi*/
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fb69 	bl	8000690 <GPIO_EnableClock>
    *GPIOA_AFRL |= 0x555 << (5*4);
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <main+0x90>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <main+0x90>)
 8000fc4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000fc8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000fcc:	6013      	str	r3, [r2, #0]
    GPIO_Init(0,5,ALTERNATE_FUN,PUSH_PULL);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fb71 	bl	80006bc <GPIO_Init>
    GPIO_Init(0,6,ALTERNATE_FUN,PUSH_PULL);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2202      	movs	r2, #2
 8000fde:	2106      	movs	r1, #6
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fb6b 	bl	80006bc <GPIO_Init>
    GPIO_Init(0,7,ALTERNATE_FUN,PUSH_PULL);
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2202      	movs	r2, #2
 8000fea:	2107      	movs	r1, #7
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fb65 	bl	80006bc <GPIO_Init>


	SPI_EnableClock();         /*Enable SPI*/
 8000ff2:	f7ff fd8b 	bl	8000b0c <SPI_EnableClock>
	SPI_Init(MASTER, IDLE_LOW, SAMPLE_SOCAND_TRANSITION);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff fd94 	bl	8000b28 <SPI_Init>


	StartTimer();             /*Polling*/
 8001000:	f7ff fd46 	bl	8000a90 <StartTimer>
	EnableInterrupt();
 8001004:	f7ff fd6a 	bl	8000adc <EnableInterrupt>
	SetPollingTime(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f7ff ff34 	bl	8000e78 <SetPollingTime>
	StartPolling();
 8001010:	f7ff ff26 	bl	8000e60 <StartPolling>


	while(1)
 8001014:	e7fe      	b.n	8001014 <main+0x8c>
 8001016:	bf00      	nop
 8001018:	40020020 	.word	0x40020020

0800101c <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	TIM2->SR &=~(1<<0);
 8001020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001024:	8a1b      	ldrh	r3, [r3, #16]
 8001026:	b29b      	uxth	r3, r3
 8001028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	8213      	strh	r3, [r2, #16]
	CallPollingFunction();
 8001034:	f7ff fd63 	bl	8000afe <CallPollingFunction>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490e      	ldr	r1, [pc, #56]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0b      	ldr	r4, [pc, #44]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001066:	f7ff ff89 	bl	8000f7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800106a:	f000 f811 	bl	8001090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff ff8b 	bl	8000f88 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001080:	080010f8 	.word	0x080010f8
  ldr r2, =_sbss
 8001084:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001088:	200000bc 	.word	0x200000bc

0800108c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <__libc_init_array>:
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	4d0d      	ldr	r5, [pc, #52]	; (80010c8 <__libc_init_array+0x38>)
 8001094:	4c0d      	ldr	r4, [pc, #52]	; (80010cc <__libc_init_array+0x3c>)
 8001096:	1b64      	subs	r4, r4, r5
 8001098:	10a4      	asrs	r4, r4, #2
 800109a:	2600      	movs	r6, #0
 800109c:	42a6      	cmp	r6, r4
 800109e:	d109      	bne.n	80010b4 <__libc_init_array+0x24>
 80010a0:	4d0b      	ldr	r5, [pc, #44]	; (80010d0 <__libc_init_array+0x40>)
 80010a2:	4c0c      	ldr	r4, [pc, #48]	; (80010d4 <__libc_init_array+0x44>)
 80010a4:	f000 f818 	bl	80010d8 <_init>
 80010a8:	1b64      	subs	r4, r4, r5
 80010aa:	10a4      	asrs	r4, r4, #2
 80010ac:	2600      	movs	r6, #0
 80010ae:	42a6      	cmp	r6, r4
 80010b0:	d105      	bne.n	80010be <__libc_init_array+0x2e>
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80010b8:	4798      	blx	r3
 80010ba:	3601      	adds	r6, #1
 80010bc:	e7ee      	b.n	800109c <__libc_init_array+0xc>
 80010be:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c2:	4798      	blx	r3
 80010c4:	3601      	adds	r6, #1
 80010c6:	e7f2      	b.n	80010ae <__libc_init_array+0x1e>
 80010c8:	080010f0 	.word	0x080010f0
 80010cc:	080010f0 	.word	0x080010f0
 80010d0:	080010f0 	.word	0x080010f0
 80010d4:	080010f4 	.word	0x080010f4

080010d8 <_init>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	bf00      	nop
 80010dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	469e      	mov	lr, r3
 80010e2:	4770      	bx	lr

080010e4 <_fini>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr
